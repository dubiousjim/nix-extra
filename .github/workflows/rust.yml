name: Rust

on: [push, pull_request]

# on:
#   push:
#     branches: [ master ]
#   pull_request:
#     branches: [ master ]

jobs:
  build:
    name: ${{ matrix.config.kind }} ${{ matrix.config.os }}
    # if: |
    #   github.event_name == 'push' ||
    #   !startsWith(github.event.pull_request.head.label, 'dubiousjim:')
    runs-on: ${{ matrix.config.os }}
    timeout-minutes: 60
    strategy:
      matrix:
        config:
          - os: ubuntu-16.04
            kind: lint
          - os: ubuntu-16.04 # also ubuntu-18.04/latest
            kind: test_debug
          - os: ubuntu-18.04
            kind: test_musl
          - os: ubuntu-16.04
            kind: test_release
          - os: macOS-10.15 # macOS-latest
            kind: test_release

    env:
      CARGO_INCREMENTAL: 0
      RUST_BACKTRACE: full

    steps:
    # - name: Configure git
    #   run: git config --global core.symlinks true

    - name: Setup musl 1
      if: endsWith(matrix.config.kind, 'musl')
      uses: davidgraeff/rust-musl-action@master

    - name: Setup musl 2
      if: endsWith(matrix.config.kind, 'musl')
      uses: actions-rs/toolchain@master
      with:
        profile: minimal
        toolchain: stable # or "1.42.0"
        target: x86_64-unknown-linux-musl
        override: true

    # - name: Install rust
    #   uses: hecrj/setup-rust-action@master
    #   with:
    #     rust-version: "1.42.0"
    #     target: x86_64-unknown-linux-musl
    #     components: a, b

    # - name: Install clippy and rustfmt
    #   if: matrix.config.kind == 'lint'
    #   run: |
    #     rustup component add clippy
    #     rustup component add rustfmt

    - name: Log versions
      run: |
        rustc --version
        cargo --version
        sw_vers 2>/dev/null || ldd --version

    - name: Clone repository
      uses: actions/checkout@master
      with:
        fetch-depth: 5

    # - name: Configure cargo data directory
    #   # After this point, all cargo registry and crate data is stored in
    #   # $GITHUB_WORKSPACE/.cargo_home. This allows us to cache only the files
    #   # that are needed during the build process. Additionally, this works
    #   # around a bug in the 'cache' action that causes directories outside of
    #   # the workspace dir to be saved/restored incorrectly.
    #   run: echo "::set-env name=CARGO_HOME::$(pwd)/.cargo_home"

    # - name: Cache
    #   uses: actions/cache@master
    #   with:
    #     # Note: crates from the denoland/deno git repo always get rebuilt,
    #     # and their outputs ('deno', 'libdeno.rlib' etc.) are quite big,
    #     # so we cache only those subdirectories of target/{debug|release} that
    #     # contain the build output for crates that come from the registry.
    #     path: |-
    #       .cargo_home
    #       target/*/.*
    #       target/*/build
    #       target/*/deps
    #     key:
    #       ${{ matrix.config.os }}-${{ matrix.config.kind }}-${{ hashFiles('Cargo.lock') }}

    - name: Lint
      if: matrix.config.kind == 'lint'
      # TODO make it fail if output? acts like cargo check
      run: cargo clippy --all-targets

    - name: Build debug
      if: matrix.config.kind == 'test_debug'
      # TODO make warnings fail?
      run: cargo build -vv --all-targets

    - name: Build musl
      if: matrix.config.kind == 'test_musl'
      run: cargo build -vv --target x86_64-unknown-linux-musl

    - name: Build release
      if: matrix.config.kind == 'test_release'
      run: cargo build --release --verbose --all-targets

    - name: Test debug
      if: matrix.config.kind == 'test_debug'
      run: cargo test --verbose --all-targets -- --nocapture

    - name: Test musl
      if: matrix.config.kind == 'test_musl'
      run: cargo test --verbose --target x86_64-unknown-linux-musl -- --nocapture

    - name: Test release
      if: matrix.config.kind == 'test_release'
      run: cargo test --release --verbose  --all-targets
